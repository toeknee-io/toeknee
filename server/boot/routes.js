// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, SPOTIFY_TOKEN_EXPIRE_TIME_MS, SPOTIFY_TRACK_FIELDS_FILTER, SpotifyWebApi, _, fs, multer, path, storage, upload, url, yaml;

  fs = require("fs");

  url = require("url");

  path = require("path");

  _ = require('lodash');

  yaml = require("js-yaml");

  multer = require("multer");

  storage = multer.diskStorage({
    destination: function(req, file, cb) {
      return cb(null, path.join(__dirname, "../../galleries/" + req._galleryId));
    },
    filename: function(req, file, cb) {
      return cb(null, "" + file.originalname);
    }
  });

  upload = multer({
    storage: storage
  });

  SpotifyWebApi = require("spotify-web-api-node");

  SPOTIFY_TOKEN_EXPIRE_TIME_MS = 3592000;

  SPOTIFY_TRACK_FIELDS_FILTER = "items.track(id,album(external_urls,images,name,uri),artists(external_urls,name,uri),name),next,total";

  Promise = require("promise");

  module.exports = function(server) {
    var SPOTIFY_UID, cachedPlaylists, filterTrack, getPlaylistTracks, getSpotifyToken, router, setTokenTimer, spotifyApi;
    spotifyApi = new SpotifyWebApi({
      clientId: server.get("spotify_cid"),
      clientSecret: server.get("spotify_sec"),
      redirectUri: server.get("spotify_acb")
    });
    SPOTIFY_UID = server.get("spotify_uid");
    setTokenTimer = true;
    getSpotifyToken = function() {
      console.log('Getting new Spotify Access Token');
      spotifyApi.clientCredentialsGrant().then(function(data) {
        var token;
        token = data.body.access_token;
        console.log("Got new Spotify Access Token: " + token);
        return spotifyApi.setAccessToken(token);
      }, function(err) {
        return console.log("Something went wrong when retrieving an access token: " + err.message);
      });
      if (setTokenTimer) {
        setInterval(getSpotifyToken, SPOTIFY_TOKEN_EXPIRE_TIME_MS);
        return setTokenTimer = false;
      }
    };
    getSpotifyToken();
    cachedPlaylists = [];
    router = server.loopback.Router();
    router.param("userId", function(req, res, next, id) {
      req._userId = id;
      return next();
    });
    router.param("playlistId", function(req, res, next, id) {
      req._playlistId = id;
      return next();
    });
    router.param("galleryId", function(req, res, next, id) {
      req._galleryId = id;
      return next();
    });
    router.get('/uptime', server.loopback.status());
    router.get("/routes", function(req, res, next) {
      var routes;
      routes = yaml.safeLoad(fs.readFileSync(path.join(__dirname, "../../client/js/ng-fof/config/routes.yaml"), "utf8"));
      return res.status(200).json(routes);
    });
    router.get("/gallery/:galleryId", function(req, res) {
      console.log("Retrieving photos: for gallery [" + req._galleryId + "]");
      return fs.readdir(process.env.FOF_SRC + "/galleries/" + req._galleryId, function(err, files, resStatus, data) {
        var file, i, len;
        if (resStatus == null) {
          resStatus = 200;
        }
        if (data == null) {
          data = {};
        }
        if (err) {
          console.log("Could not read gallery directory: " + err.message);
          resStatus = 500;
        } else {
          console.log("Found " + files.length + " " + (files.length === 1 ? 'photo' : 'photos') + " for gallery " + req._galleryId);
          for (i = 0, len = files.length; i < len; i++) {
            file = files[i];
            console.log(file);
          }
          data = files;
        }
        return res.status(resStatus).json(data);
      });
    });
    router.get("/google-test", function(req, res) {
      return console.log("Got Google Callback: " + (ins(req)));
    });
    router.post("/gallery/:galleryId", upload.any(), function(req, res, next) {
      console.log("Saving photo [" + (JSON.stringify(req.files)) + "] for gallery [" + req._galleryId + "]");
      return res.status(200).json({});
    });
    router.get("/spotify/auth/callback", function(req, res, next) {
      console.log("Got auth response from Spotify: " + (ins(req)));
      return next();
    });
    router.get("/spotify/:userId/playlists", function(req, res) {
      return spotifyApi.getUserPlaylists(req._userId, {
        fields: 'items(external_urls,id,images,name,tracks,uri,owner)'
      }).then(function(data) {
        console.log("User Playlists: " + (ins(data.body)) + " ");
        return res.status(200).json(data.body.items);
      }, function(err) {
        res.status(500).json(err);
        return console.log("Something went wrong getting Playlist for User " + req._userId + ": " + err.message);
      });
    });
    router.get("/spotify/:userId/playlists/:playlistId/tracks", function(req, res, playlist) {
      var ref;
      if (playlist == null) {
        playlist = {};
      }
      ref = [req._userId, req._playlistId, [], true], playlist.userId = ref[0], playlist.id = ref[1], playlist.tracks = ref[2], playlist.needsPromise = ref[3];
      return getPlaylistTracks(playlist, {
        fields: SPOTIFY_TRACK_FIELDS_FILTER,
        offset: req.query.offset || 0
      }).then(function(playlist) {
        return res.status(200).json(playlist);
      }, function(err) {
        res.status(500).json(err);
        return console.log("Something went wrong getting Playlist " + playlist.id + " Tracks for User " + playlist.userId + ": " + err.message);
      });
    });
    getPlaylistTracks = function(playlist, opts) {
      var promiseFn;
      promiseFn = function(_resolve, _reject) {
        var ref;
        if (playlist.needsPromise) {
          ref = [_resolve, _reject, false], playlist.resolve = ref[0], playlist.reject = ref[1], playlist.needsPromise = ref[2];
        }
        return spotifyApi.getPlaylistTracks(playlist.userId, playlist.id, opts).then(function(data, payload) {
          var i, item, items, len, ref1, ref2, ref3;
          if (payload == null) {
            payload = {};
          }
          ref2 = [((ref1 = data.body) != null ? ref1.items : void 0) || [], [], data.body.total], items = ref2[0], payload.tracks = ref2[1], payload.totalTracks = ref2[2];
          for (i = 0, len = items.length; i < len; i++) {
            item = items[i];
            payload.tracks.push(filterTrack(item.track));
          }
          if ((ref3 = data.body) != null ? ref3.next : void 0) {
            payload.offset = url.parse(data.body.next, true).query.offset || 0;
          }
          return playlist.resolve(payload);
        }, function(err) {
          return playlist.reject(err);
        });
      };
      return new Promise(promiseFn);
    };
    filterTrack = function(obj) {
      var removeMkt;
      removeMkt = function(currObj) {
        if (_.isObject(currObj)) {
          return _.forIn(currObj, function(val, key) {
            if (key === 'available_markets') {
              return delete currObj[key];
            } else {
              return removeMkt(currObj[key]);
            }
          });
        }
      };
      removeMkt(obj);
      return obj;
    };
    server.use('/', server.loopback["static"](process.env.FOF_SRC + "/client/views"));
    server.use('/img', server.loopback["static"](process.env.FOF_SRC + "/client/img"));
    server.use('/gallery', server.loopback["static"](process.env.FOF_SRC + "/galleries"));
    server.use('/js', server.loopback["static"](process.env.FOF_SRC + "/client/js"));
    server.use('/css', server.loopback["static"](process.env.FOF_SRC + "/client/css"));
    server.use(router);
    return server;
  };

}).call(this);
