// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, SPOTIFY_TOKEN_EXPIRE_TIME_MS, SpotifyWebApi, _, fs, multer, storage, upload, url, yaml;

  fs = require("fs");

  url = require('url');

  _ = require('lodash');

  yaml = require("js-yaml");

  multer = require("multer");

  storage = multer.diskStorage({
    destination: function(req, file, cb) {
      return cb(null, process.env.FOF_SRC + "/galleries/" + req._galleryId);
    },
    filename: function(req, file, cb) {
      return cb(null, "" + file.originalname);
    }
  });

  upload = multer({
    storage: storage
  });

  SpotifyWebApi = require("spotify-web-api-node");

  SPOTIFY_TOKEN_EXPIRE_TIME_MS = 3592000;

  Promise = require('promise');

  module.exports = function(server) {
    var SPOTIFY_UID, cachedPlaylists, filterTrack, getNextPlaylistsTracks, getPlaylistsTracks, getSpotifyToken, router, setTokenTimer, spotifyApi;
    spotifyApi = new SpotifyWebApi({
      clientId: server.get("spotify_cid"),
      clientSecret: server.get("spotify_sec"),
      redirectUri: server.get("spotify_acb")
    });
    SPOTIFY_UID = server.get("spotify_uid");
    setTokenTimer = true;
    getSpotifyToken = function() {
      console.log('Getting new Spotify Access Token');
      spotifyApi.clientCredentialsGrant().then(function(data) {
        var token;
        token = data.body.access_token;
        console.log("Got new Spotify Access Token: " + token);
        return spotifyApi.setAccessToken(token);
      }, function(err) {
        return console.log("Something went wrong when retrieving an access token: " + err.message);
      });
      if (setTokenTimer) {
        setInterval(getSpotifyToken, SPOTIFY_TOKEN_EXPIRE_TIME_MS);
        return setTokenTimer = false;
      }
    };
    getSpotifyToken();
    cachedPlaylists = null;
    router = server.loopback.Router();
    router.param("galleryId", function(req, res, next, id) {
      console.log("Processing request for gallery: " + id);
      req._galleryId = id;
      return next();
    });
    router.get('/uptime', server.loopback.status());
    router.get("/routes", function(req, res, next) {
      var routes;
      routes = yaml.safeLoad(fs.readFileSync(process.env.FOF_SRC + "/client/js/ng-fof/config/routes.yaml", "utf8"));
      return res.json(routes);
    });
    router.get("/gallery/:galleryId", function(req, res) {
      console.log("Retrieving photos: for gallery [" + req._galleryId + "]");
      return fs.readdir(process.env.FOF_SRC + "/galleries/" + req._galleryId, function(err, files) {
        var data, file, j, len, resStatus;
        resStatus = 200;
        data = {};
        if (err) {
          console.log("Could not read gallery directory: " + err.message);
          resStatus = 500;
        } else {
          console.log("Found " + files.length + " " + (files.length === 1 ? 'photo' : 'photos') + " for gallery " + req._galleryId);
          for (j = 0, len = files.length; j < len; j++) {
            file = files[j];
            console.log(file);
          }
          data = files;
        }
        return res.status(resStatus).json(data);
      });
    });
    router.get("/google-test", function(req, res) {
      return console.log("Got Google Callback: " + (ins(req)));
    });
    router.post("/gallery/:galleryId", upload.any(), function(req, res, next) {
      console.log("Saving photo [" + (JSON.stringify(req.files)) + "] for gallery [" + req._galleryId + "]");
      return res.status(200).json({});
    });
    router.get("/spotify/auth/callback", function(req, res, next) {
      console.log("Got auth response from Spotify: " + (ins(req)));
      return next();
    });
    getPlaylistsTracks = function(playlists) {
      var promiseFn;
      promiseFn = function(resolve, reject, newPlaylists) {
        var i, playlist, ref, results;
        if (newPlaylists == null) {
          newPlaylists = [];
        }
        results = [];
        for (i in playlists) {
          playlist = playlists[i];
          ref = [[], true], playlist.plTracks = ref[0], playlist.needsPromise = ref[1];
          results.push(getNextPlaylistsTracks(playlist, {}).then(function(newPlaylist) {
            newPlaylists.push(_.pick(newPlaylist, ['images', 'name', 'plTracks', 'external_urls', 'uri']));
            if (newPlaylists.length === playlists.length) {
              return resolve(newPlaylists);
            }
          }, function(err) {
            return reject(err);
          }));
        }
        return results;
      };
      return new Promise(promiseFn);
    };
    filterTrack = function(obj) {
      var removeMkt;
      removeMkt = function(currObj) {
        if (_.isObject(currObj)) {
          return _.forIn(currObj, function(val, key) {
            if (key === 'available_markets') {
              return delete currObj[key];
            } else {
              return removeMkt(currObj[key]);
            }
          });
        }
      };
      removeMkt(obj);
      return obj;
    };
    getNextPlaylistsTracks = function(playlist, opts) {
      var promiseFn;
      promiseFn = function(_resolve, _reject) {
        var ref;
        if (playlist.needsPromise) {
          ref = [_resolve, _reject, false], playlist.resolve = ref[0], playlist.reject = ref[1], playlist.needsPromise = ref[2];
        }
        return spotifyApi.getPlaylistTracks(SPOTIFY_UID, playlist.id, opts).then(function(data) {
          var i, nextQs, ref1, val;
          ref1 = data.body.items;
          for (i in ref1) {
            val = ref1[i];
            playlist.plTracks.push(filterTrack(val.track));
          }
          if (data.body.next != null) {
            nextQs = url.parse(data.body.next, true).query;
            opts = {
              offset: nextQs.offset,
              limit: nextQs.limit
            };
            return getNextPlaylistsTracks(playlist, opts).then;
          } else {
            return playlist.resolve(playlist);
          }
        }, function(err) {
          return playlist.reject(err);
        });
      };
      return new Promise(promiseFn);
    };
    router.get("/spotify/me/playlists", function(req, res) {
      if (cachedPlaylists != null) {
        return res.json(cachedPlaylists);
      }
      return spotifyApi.getUserPlaylists(SPOTIFY_UID, {
        'fields': 'items'
      }).then(function(data) {
        var playlists;
        playlists = data.body.items;
        return getPlaylistsTracks(playlists).then(function(newPlaylists) {
          console.log("Got Playlists: ", newPlaylists);
          res.json(newPlaylists);
          return cachedPlaylists = newPlaylists;
        }, function(err) {
          return console.log("Something went wrong getting Playlist Tracks for User " + SPOTIFY_UID + ": " + err.message);
        });
      }, function(err) {
        return console.log("Something went wrong getting Playlist for User " + SPOTIFY_UID + ": " + err.message);
      });
    });
    server.use('/', server.loopback["static"](process.env.FOF_SRC + "/client/views"));
    server.use('/img', server.loopback["static"](process.env.FOF_SRC + "/client/img"));
    server.use('/gallery', server.loopback["static"](process.env.FOF_SRC + "/galleries"));
    server.use('/js', server.loopback["static"](process.env.FOF_SRC + "/client/js"));
    server.use('/css', server.loopback["static"](process.env.FOF_SRC + "/client/css"));
    server.use(router);
  };

}).call(this);
