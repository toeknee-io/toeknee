// Generated by CoffeeScript 1.10.0
(function() {
  var Twitter, _, client, conf, err, errTweet, error, fs, getErrReply, getReply, getRequestUrl, getTimeStamp, ins, ref, ref1, ref2, replyTweet, request, srConf, twitterConf;

  ref = [require("fs"), require("util").inspect, require('node-yaml-config').load(process.env.FOF_SRC + "/conf/conf.yml", "utf8")], fs = ref[0], ins = ref[1], conf = ref[2];

  ref1 = [conf.twitter, conf.sportsRadar], twitterConf = ref1[0], srConf = ref1[1];

  ref2 = [require("request"), require("lodash"), require("twitter")], request = ref2[0], _ = ref2[1], Twitter = ref2[2];

  console.log("Twitter Init");

  try {
    client = new Twitter(twitterConf.auth);
    client.stream(twitterConf.endpoints.stream, {
      track: twitterConf.mentionName
    }, function(stream) {
      console.log("Twitter Stream Open");
      stream.on("data", function(tweet, ctx) {
        var err, error, ref3, ref4;
        if (ctx == null) {
          ctx = {};
        }
        try {
          ref3 = [tweet, tweet.user.screen_name, tweet.text.split(/\s/g)], ctx.tweet = ref3[0], ctx.username = ref3[1], ctx.keys = ref3[2];
          ref4 = ["@" + ctx.username, ctx.keys[1], ctx.keys[2].toLowerCase(), ctx.keys[3], ctx.keys[4].toLowerCase()], ctx.replyName = ref4[0], ctx.year = ref4[1], ctx.league = ref4[2], ctx.subject = ref4[3], ctx.resource = ref4[4];
          console.log("[" + ctx.replyName + "] " + tweet.text);
          console.log("Keywords: " + (ins(ctx.keys)));
          if (ctx.keys[0] !== twitterConf.mentionName) {
            return;
          }
        } catch (error) {
          err = error;
          return console.error("Error while building reply options: " + (ins(err)));
        }
        return getReply(ctx, function(err, reply) {
          ctx.reply = reply;
          return replyTweet(ctx);
        });
      });
      return stream.on("error", function(err) {
        return console.error("Twitter Stream Error: " + (ins(err)));
      });
    });
    getRequestUrl = function(ctx) {
      var apiKey, endpoint, ref3, resource;
      ref3 = [srConf.endpoints[ctx.league], ctx.resource, srConf.apiKeys[ctx.league]], endpoint = ref3[0], resource = ref3[1], apiKey = ref3[2];
      if (resource === "schedule") {
        return endpoint + "/" + ctx.year + "/REG/" + resource + srConf.resFormat + "?api_key=" + apiKey;
      }
    };
    getReply = function(ctx, cb) {
      var url;
      console.log("Calling Sportradar API: " + (url = getRequestUrl(ctx)));
      return request.get(url).on("response", function(res) {
        var body, ref3, reply;
        ref3 = ["", ""], body = ref3[0], reply = ref3[1];
        res.on("data", function(chunk) {
          return body += chunk.toString();
        });
        return res.on("end", function(replyArray) {
          var game, i, j, len, len1, ref4, ref5, tweetRep, week, weeks;
          if (replyArray == null) {
            replyArray = [];
          }
          weeks = JSON.parse(body).weeks;
          for (i = 0, len = weeks.length; i < len; i++) {
            week = weeks[i];
            reply += week.number + ". ";
            ref4 = week.games;
            for (j = 0, len1 = ref4.length; j < len1; j++) {
              game = ref4[j];
              if (game.home.toUpperCase() === ctx.subject.toUpperCase()) {
                reply += game.away + " ";
              } else if (game.away.toUpperCase() === ctx.subject.toUpperCase()) {
                reply += "at " + game.home + " ";
              }
            }
          }
          while (reply.length > 0) {
            ref5 = [reply.slice(0, 140 - 15), reply.slice(140 - 15)], tweetRep = ref5[0], reply = ref5[1];
            replyArray.push(tweetRep);
          }
          return cb(null, replyArray);
        });
      }).on("error", function(err) {
        console.error("Sportradar API Error: " + (ins(err)));
        ctx.errMsg = "Sorry, we couldn't get that from our provider!";
        return errTweet(ctx);
      });
    };
    replyTweet = function(ctx) {
      var i, len, ref3, reply, results;
      ref3 = ctx.reply;
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        reply = ref3[i];
        console.log("Sending Reply: " + reply);
        results.push(client.post(twitterConf.endpoints.tweet, {
          status: ctx.replyName + " " + (reply.trim())
        }, function(err, tweet, res) {
          if (err) {
            ctx.errMsg = err[0].message;
            errTweet(ctx);
          }
          return console.log("[" + twitterConf.mentionName + "] " + tweet.text);
        }));
      }
      return results;
    };
    errTweet = function(ctx) {
      return client.post(twitterConf.endpoints.tweet, {
        status: getErrReply(ctx)
      }, function(err, tweet, res) {
        if (err) {
          return console.error("Errored while sending error tweet (wtf?!) " + (ins(err)));
        }
        return console.log("[" + twitterConf.mentionName + "] " + tweet.text);
      });
    };
    getTimeStamp = function() {
      return "@ " + (new Date().getTime());
    };
    getErrReply = function(ctx) {
      return ctx.replyName + " Doh: " + ctx.errMsg + " " + (getTimeStamp()) + "... Go Gators, tho!";
    };
  } catch (error) {
    err = error;
    console.error("Error during Twitter Initialization: " + (ins(err)));
  }

}).call(this);
