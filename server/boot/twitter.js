// Generated by CoffeeScript 1.10.0
(function() {
  var Twitter, _, conf, err, error, error1, fs, ins, path, request, twitterConf;

  path = require("path");

  fs = require("fs");

  ins = require("util").inspect;

  conf = require("node-yaml-config").load(path.join(__dirname, process.env.CONF_PATH || "../../conf/conf.yml"), "utf8");

  twitterConf = conf.twitter;

  Twitter = require("twitter");

  _ = require("lodash");

  request = require("request");

  console.log("Twitter Init");

  try {
    (function() {
      var client, getReply, getRequestUrl, getTimeStamp, replyTweet, setErrReply, srConf;
      twitterConf = twitterConf.quickstatsdev;
      srConf = conf.sportsRadar;
      client = new Twitter(twitterConf.auth);
      client.stream(twitterConf.endpoints.stream, {
        track: twitterConf.mentionName
      }, function(stream) {
        console.log("Twitter Stream Open");
        stream.on("data", function(tweet, ctx) {
          var ref, ref1;
          if (ctx == null) {
            ctx = {};
          }
          ref = [tweet, tweet.user.screen_name, tweet.text.split(/\s/g), []], ctx.tweet = ref[0], ctx.username = ref[1], ctx.keys = ref[2], ctx.replyArray = ref[3];
          ctx.replyName = "@" + ctx.username;
          if (!(ctx.keys.length < 5)) {
            ref1 = [ctx.keys[1].toLowerCase(), ctx.keys[2], ctx.keys[3], ctx.keys[4].toLowerCase()], ctx.league = ref1[0], ctx.year = ref1[1], ctx.subject = ref1[2], ctx.resource = ref1[3];
          } else {
            ctx.err = new Error("No comprende what you say meng!");
          }
          console.log("[" + ctx.replyName + "] " + tweet.text);
          console.log("Keywords: " + (ins(ctx.keys)));
          if (ctx.keys[0] !== twitterConf.mentionName) {
            return;
          }
          return getReply(ctx, function(ctx) {
            return replyTweet(ctx);
          });
        });
        return stream.on("error", function(err) {
          return console.error("Twitter Stream Error: " + (ins(err)));
        });
      });
      getRequestUrl = function(ctx) {
        var apiKey, endpoint, ref, resource;
        ref = [srConf.endpoints[ctx.league], ctx.resource, srConf.apiKeys[ctx.league]], endpoint = ref[0], resource = ref[1], apiKey = ref[2];
        if (resource === "schedule") {
          return endpoint + "/" + ctx.year + "/REG/" + resource + srConf.resFormat + "?api_key=" + apiKey;
        }
      };
      getReply = function(ctx, cb) {
        var url;
        if (ctx.err) {
          return cb(ctx);
        }
        console.log("Calling Sportradar API: " + (url = getRequestUrl(ctx)));
        return request.get(url).on("response", function(res) {
          var body, ref;
          ref = ["", ""], body = ref[0], ctx.reply = ref[1];
          res.on("data", function(chunk) {
            return body += chunk.toString();
          });
          return res.on("end", function() {
            var game, j, k, len, len1, ref1, week, weeks;
            weeks = JSON.parse(body).weeks;
            for (j = 0, len = weeks.length; j < len; j++) {
              week = weeks[j];
              ctx.reply += week.number + " ";
              ref1 = week.games;
              for (k = 0, len1 = ref1.length; k < len1; k++) {
                game = ref1[k];
                if (game.home.toUpperCase() === ctx.subject.toUpperCase()) {
                  ctx.reply += game.away + " ";
                } else if (game.away.toUpperCase() === ctx.subject.toUpperCase()) {
                  ctx.reply += "at " + game.home + " ";
                } else {
                  ctx.reply += "BYE ";
                }
              }
            }
            return cb(ctx);
          });
        }).on("error", function(err) {
          var ref;
          console.error("Sportradar API Error: " + (ins(err)));
          ref = [err, "Sorry, we couldn't get that from our provider!"], ctx.err = ref[0], ctx.reply = ref[1];
          return cb(ctx);
        });
      };
      replyTweet = function(ctx) {
        var j, len, nameLength, ref, ref1, ref2, reply, results, tweetRep;
        if (ctx.err && !ctx.reply) {
          setErrReply(ctx);
        }
        nameLength = ctx.replyName.length;
        while (((ref1 = ctx.reply) != null ? ref1.length : void 0) > 0) {
          ref = [ctx.reply.slice(0, 140 - nameLength), ctx.reply.slice(140 - nameLength)], tweetRep = ref[0], ctx.reply = ref[1];
          ctx.replyArray.push(tweetRep);
        }
        ref2 = ctx.replyArray;
        results = [];
        for (j = 0, len = ref2.length; j < len; j++) {
          reply = ref2[j];
          console.log("Sending Reply: " + reply);
          results.push(client.post(twitterConf.endpoints.tweet, {
            status: ctx.replyName + " " + (reply.trim())
          }, function(err, tweet, res) {
            if (err) {
              return replyTweet(ctx.err = err);
            }
            return console.log("[" + twitterConf.mentionName + "] " + tweet.text);
          }));
        }
        return results;
      };
      getTimeStamp = function() {
        return "@ " + (new Date().getTime());
      };
      return setErrReply = function(ctx) {
        return ctx.reply = ctx.replyName + " " + ctx.err + " " + (getTimeStamp()) + "... Go Gators, tho!";
      };
    })();
  } catch (error) {
    err = error;
    console.error("Error during Twitter Initialization: " + (ins(err.stack)));
  }

  try {
    (function() {
      var _pc, client;
      _pc = twitterConf.stuffphilmisses;
      client = new Twitter(conf.auth);
      return client.stream(twitterConf.endpoints.stream, {
        track: _pc.mentionName
      }, function(stream) {
        console.log(_pc.screenName + " twitter stream open");
        stream.on("data", function(tweet) {
          var i;
          i = _.random(_pc.reply.troll.length);
          tweet = _pc.reply.troll[i];
          return client.post(twitterConf.endpoints.tweet, {
            status: tweet
          }, function(err, tweet, res) {
            if (err) {
              return console.error("error while trolling phil: " + err);
            }
            return console.log("[" + _pc.mentionName + "] " + tweet.text);
          });
        });
        return stream.on("error", function(err) {
          return console.error("Twitter Stream Error: " + (ins(err)));
        });
      });
    })();
  } catch (error1) {
    err = error1;
    console.error("Error during Twitter Initialization: " + (ins(err.stack)));
  }

}).call(this);
