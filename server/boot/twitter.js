// Generated by CoffeeScript 1.10.0
(function() {
  var Twitter, _, client, conf, err, error, fs, getReply, getRequestUrl, getTimeStamp, ins, path, ref, ref1, replyTweet, request, setErrReply, srConf, twitterConf;

  path = require("path");

  ref = [require("fs"), require("util").inspect, require('node-yaml-config').load(path.join(__dirname, "../../conf/conf.yml"), "utf8")], fs = ref[0], ins = ref[1], conf = ref[2];

  ref1 = [conf.twitter, conf.sportsRadar, require("request"), require("lodash"), require("twitter")], twitterConf = ref1[0], srConf = ref1[1], request = ref1[2], _ = ref1[3], Twitter = ref1[4];

  console.log("Twitter Init");

  try {
    client = new Twitter(twitterConf.auth);
    client.stream(twitterConf.endpoints.stream, {
      track: twitterConf.mentionName
    }, function(stream) {
      console.log("Twitter Stream Open");
      stream.on("data", function(tweet, ctx) {
        var ref2, ref3;
        if (ctx == null) {
          ctx = {};
        }
        ref2 = [tweet, tweet.user.screen_name, tweet.text.split(/\s/g), []], ctx.tweet = ref2[0], ctx.username = ref2[1], ctx.keys = ref2[2], ctx.replyArray = ref2[3];
        ctx.replyName = "@" + ctx.username;
        if (!(ctx.keys.length < 5)) {
          ref3 = [ctx.keys[1].toLowerCase(), ctx.keys[2], ctx.keys[3], ctx.keys[4].toLowerCase()], ctx.league = ref3[0], ctx.year = ref3[1], ctx.subject = ref3[2], ctx.resource = ref3[3];
        } else {
          ctx.err = new Error("No comprende what you say meng!");
        }
        console.log("[" + ctx.replyName + "] " + tweet.text);
        console.log("Keywords: " + (ins(ctx.keys)));
        if (ctx.keys[0] !== twitterConf.mentionName) {
          return;
        }
        return getReply(ctx, function(ctx) {
          return replyTweet(ctx);
        });
      });
      return stream.on("error", function(err) {
        return console.error("Twitter Stream Error: " + (ins(err)));
      });
    });
    getRequestUrl = function(ctx) {
      var apiKey, endpoint, ref2, resource;
      ref2 = [srConf.endpoints[ctx.league], ctx.resource, srConf.apiKeys[ctx.league]], endpoint = ref2[0], resource = ref2[1], apiKey = ref2[2];
      if (resource === "schedule") {
        return endpoint + "/" + ctx.year + "/REG/" + resource + srConf.resFormat + "?api_key=" + apiKey;
      }
    };
    getReply = function(ctx, cb) {
      var url;
      if (ctx.err) {
        return cb(ctx);
      }
      console.log("Calling Sportradar API: " + (url = getRequestUrl(ctx)));
      return request.get(url).on("response", function(res) {
        var body, ref2;
        ref2 = ["", ""], body = ref2[0], ctx.reply = ref2[1];
        res.on("data", function(chunk) {
          return body += chunk.toString();
        });
        return res.on("end", function() {
          var game, i, j, len, len1, ref3, week, weeks;
          weeks = JSON.parse(body).weeks;
          for (i = 0, len = weeks.length; i < len; i++) {
            week = weeks[i];
            ctx.reply += week.number + " ";
            ref3 = week.games;
            for (j = 0, len1 = ref3.length; j < len1; j++) {
              game = ref3[j];
              if (game.home.toUpperCase() === ctx.subject.toUpperCase()) {
                ctx.reply += game.away + " ";
              } else if (game.away.toUpperCase() === ctx.subject.toUpperCase()) {
                ctx.reply += "at " + game.home + " ";
              } else {
                ctx.reply += "BYE ";
              }
            }
          }
          return cb(ctx);
        });
      }).on("error", function(err) {
        var ref2;
        console.error("Sportradar API Error: " + (ins(err)));
        ref2 = [err, "Sorry, we couldn't get that from our provider!"], ctx.err = ref2[0], ctx.reply = ref2[1];
        return cb(ctx);
      });
    };
    replyTweet = function(ctx) {
      var i, len, nameLength, ref2, ref3, ref4, reply, results, tweetRep;
      if (ctx.err && !ctx.reply) {
        setErrReply(ctx);
      }
      nameLength = ctx.replyName.length;
      while (((ref3 = ctx.reply) != null ? ref3.length : void 0) > 0) {
        ref2 = [ctx.reply.slice(0, 140 - nameLength), ctx.reply.slice(140 - nameLength)], tweetRep = ref2[0], ctx.reply = ref2[1];
        ctx.replyArray.push(tweetRep);
      }
      ref4 = ctx.replyArray;
      results = [];
      for (i = 0, len = ref4.length; i < len; i++) {
        reply = ref4[i];
        console.log("Sending Reply: " + reply);
        results.push(client.post(twitterConf.endpoints.tweet, {
          status: ctx.replyName + " " + (reply.trim())
        }, function(err, tweet, res) {
          if (err) {
            return replyTweet(ctx.err = err);
          }
          return console.log("[" + twitterConf.mentionName + "] " + tweet.text);
        }));
      }
      return results;
    };
    getTimeStamp = function() {
      return "@ " + (new Date().getTime());
    };
    setErrReply = function(ctx) {
      return ctx.reply = ctx.replyName + " " + ctx.err + " " + (getTimeStamp()) + "... Go Gators, tho!";
    };
  } catch (error) {
    err = error;
    console.error("Error during Twitter Initialization: " + (ins(err.stack)));
  }

}).call(this);
